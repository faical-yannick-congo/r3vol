## Dockerfile to create devel version of CoRR Database

FROM ubuntu:16.04
ENV DEBIAN_FRONTEND noninteractive

RUN apt-get -y update
RUN apt-get install -y sudo
RUN apt-get install -y apt-utils
RUN apt-get install bzip2
RUN apt-get install -y build-essential
RUN apt-get -y update
RUN apt-get install -y git
RUN apt-get install -y wget
#RUN sudo apt-get install -y mongodb

## Create a user with no sudo password.

RUN useradd -m {{ docker_user }}
RUN passwd -d {{ docker_user }}
RUN adduser {{ docker_user }} sudo
RUN echo '{{ docker_user }} ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

COPY tmp_admin.json /tmp/tmp_admin.json
RUN chmod a+rwx /tmp/tmp_admin.json

USER {{ docker_user }}
WORKDIR {{ local_path }}

COPY requirements.yaml {{ local_path }}/requirements.yaml
COPY corr {{ local_path }}/corr

{{ "COPY aws "~local_path if storage_type == "s3" else "" }}

RUN sudo chown {{ docker_user }}:{{ docker_user }} {{ local_path }}/corr -R

RUN sudo chown {{ docker_user }}:{{ docker_user }} {{ local_path }}/requirements.yaml

RUN wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh
RUN bash Miniconda-latest-Linux-x86_64.sh -b -p {{ anaconda_path }}
RUN echo 'export PATH="{{ local_path }}/anaconda/bin:$PATH"'>> {{ local_path }}/.bashrc
RUN {{ conda }} update -y conda
RUN {{ conda }} create -y -n {{ corr_env }} python=3.4
RUN {{ conda }} env update -n {{ corr_env }} --file {{ local_path }}/requirements.yaml

{{ "RUN apt-get install -y clamav-daemon" if mode == "https" else "" }}
{{ "RUN apt-get install -y clamav-freshclam" if mode == "https" else "" }}
{{ "RUN apt-get install -y clamav-unofficial-sigs" if mode == "https" else "" }}

RUN sudo chown {{ docker_user }}:{{ docker_user }} {{ local_path }}/corr -R

WORKDIR {{ local_path }}/corr/corr-db

RUN {{ env_path }}/python setup.py install

WORKDIR {{ local_path }}/corr/corr-cloud

EXPOSE {{ mapped_port }}

VOLUME {{ local_path }}/corr-storage
# VOLUME /tmp

CMD {{ "freshclam; service clamav-daemon start; " if mode == "https" else "" }}{{ env_path }}/python run.py --host {{ hostvars['cloudhost']['ansible_ssh_host'] }} --port {{hostvars['cloudhost']['mapped_port']}}